---
- name: Configure SportStore development environment
  hosts: all
  become: yes
  vars:
    dotnet_version: "9.0"
    db_password: "YourPassword123!"
    app_directory: "/opt/sportstore"
    db_name: "sportstore"
    db_user: "sportstore_user"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    # --- Update system and install basic packages ---
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install basic packages
      apt:
        name:
          - curl
          - wget
          - gnupg
          - software-properties-common
          - apt-transport-https
          - python3-pip
        state: present

    # --- Install Python MySQL client for Ansible ---
    - name: Install Python MySQL client
      pip:
        name: PyMySQL
        executable: pip3

    # --- .NET SDK Installation ---
    - name: Add Microsoft package repository for .NET
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Microsoft repository
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/ubuntu/20.04/prod focal main"
        state: present
        filename: "microsoft"

    - name: Install .NET 9 SDK
      apt:
        name: dotnet-sdk-{{ dotnet_version }}
        state: present
        update_cache: yes

    - name: Install ASP.NET Core runtime
      apt:
        name: aspnetcore-runtime-{{ dotnet_version }}
        state: present

# --- MariaDB Setup ---
- name: Configure MariaDB
  hosts: all
  become: yes
  vars:
    db_password: "YourPassword123!"
    db_name: "sportstore"
    db_user: "sportstore_user"
  tasks:
    - name: Install MariaDB server and client
      apt:
        name:
          - mariadb-server
          - mariadb-client
        state: present
        update_cache: yes

    - name: Ensure MariaDB is started and enabled
      systemd:
        name: mariadb
        state: started
        enabled: yes

    - name: Wait for MariaDB to start
      wait_for:
        port: 3306
        delay: 10
        timeout: 60

    # First, try to connect without password to set initial root password
    - name: Check if root can connect without password
      mysql_query:
        query: "SELECT 1"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      register: root_access
      ignore_errors: yes
      changed_when: false

    - name: Set root password if no password is set
      mysql_user:
        name: root
        host: localhost
        password: "{{ db_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        check_implicit_admin: yes
        state: present
      when: root_access is succeeded

    - name: Alternative method - use debconf to set password
      debconf:
        name: mariadb-server
        question: "mysql-server/root_password"
        value: "{{ db_password }}"
        vtype: "password"
      when: root_access is failed

    - name: Alternative method - set password confirmation
      debconf:
        name: mariadb-server
        question: "mysql-server/root_password_again"
        value: "{{ db_password }}"
        vtype: "password"
      when: root_access is failed

    - name: Reconfigure MariaDB to apply password
      dpkg_selections:
        name: mariadb-server
        selection: reconfigure
      when: root_access is failed

    - name: Restart MariaDB to apply changes
      systemd:
        name: mariadb
        state: restarted
      when: root_access is failed

    - name: Wait for MariaDB to restart
      wait_for:
        port: 3306
        delay: 10
        timeout: 60
      when: root_access is failed

    # Now try to connect with the password
    - name: Verify root password works
      mysql_query:
        query: "SELECT 1"
        login_user: root
        login_password: "{{ db_password }}"
      register: password_verify
      ignore_errors: yes
      changed_when: false

    # If password verification fails, use emergency reset method
    - name: Emergency reset of root password
      shell: |
        sudo systemctl stop mariadb
        sudo mysqld_safe --skip-grant-tables --skip-networking &
        sleep 5
        mysql -u root << EOF
        FLUSH PRIVILEGES;
        ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ db_password }}';
        FLUSH PRIVILEGES;
        EXIT;
        EOF
        sudo pkill mysqld_safe
        sudo systemctl start mariadb
      when: password_verify is failed
      args:
        warn: no

    - name: Final wait for MariaDB
      wait_for:
        port: 3306
        delay: 5
        timeout: 30

    # Now proceed with database setup
    - name: Remove anonymous users
      mysql_user:
        name: ""
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ db_password }}"

    - name: Remove test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ db_password }}"

    - name: Create application database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_password: "{{ db_password }}"

    - name: Create application user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ db_password }}"

    - name: Ensure root user has localhost access only
      mysql_user:
        name: root
        host: "{{ item }}"
        password: "{{ db_password }}"
        state: present
        login_user: root
        login_password: "{{ db_password }}"
      with_items:
        - localhost
        - 127.0.0.1
        - ::1

    - name: Remove any root user with wildcard host
      mysql_user:
        name: root
        host: "%"
        state: absent
        login_user: root
        login_password: "{{ db_password }}"

    - name: Flush privileges
      mysql_query:
        query: "FLUSH PRIVILEGES"
        login_user: root
        login_password: "{{ db_password }}"

    # --- Application Setup ---
    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        mode: '0755'

    - name: Create appsettings.Development.json template
      template:
        src: templates/appsettings.Development.json.j2
        dest: "{{ app_directory }}/appsettings.Development.json"
        mode: '0644'

    - name: Create startup script
      template:
        src: templates/start-app.sh.j2
        dest: "{{ app_directory }}/start-app.sh"
        mode: '0755'

- name: Configure firewall
  hosts: all
  become: yes
  tasks:
    - name: Install ufw
      apt:
        name: ufw
        state: present

    - name: Allow SSH
      ufw:
        rule: allow
        port: ssh
        state: enabled

    - name: Allow HTTP
      ufw:
        rule: allow
        port: "80"
        state: enabled

    - name: Allow port 5000 (ASP.NET dev server)
      ufw:
        rule: allow
        port: "5000"
        state: enabled

    - name: Allow MariaDB
      ufw:
        rule: allow
        port: "3306"
        state: enabled
